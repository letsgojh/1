import sys

input = sys.stdin.readline


def get_smallest_node():
  minvalue = INF # 가장 최소 비용
  index = 0 # return 값 (가장 최소 비용 index)

  for i in range(1, Node+1):
    if distance[i] < minvalue and not visited[i]:
      minvalue = distance[i]
      index = i

  return index


def dijkstra(start):
  distance[start] = 0
  visited[start] = True

  for i in range(1, Node + 1):
    if graph[start][i] != INF:
      distance[i] = graph[start][i]

  for i in range(Node-1): # 본인 노드 빼고 다 탐색
    now = get_smallest_node()
    visited[now] = True

    for k in range(1,Node+1):
      if graph[now][k] != INF:
        Cost = distance[now] + graph[now][k]

        if Cost < distance[k]:
          distance[k] = Cost


if __name__ == '__main__':

  INF = int(1e9)
  Node = int(input())
  Edge = int(input())

  graph = [[INF for k in range(Node + 1)] for i in range(Node + 1)]
  visited = [False] * (Node + 1)
  distance = [INF] * (Node + 1)

  for _ in range(Edge):
    node1, node2, cost = map(int, input().split())

    if graph[node1][node2] != INF:
      graph[node1][node2] = min(graph[node1][node2], cost)

    elif node1 != node2:
      graph[node1][node2] = cost

  start, end = map(int, input().split())

  dijkstra(start)

  print(distance[end])
