#1753
#두 노드 사이에 여러 개의 간선 존재 가능 -> 어차피 최소비용 간선만 뽑아쓴다.
# test case = https://www.acmicpc.net/board/view/98508
import sys

input = sys.stdin.readline


def get_smallest_node():  # 가장 비용적은 인덱스반환(graph에서)
  minvalue = INF
  index = 0

  for i in range(1, Node + 1):
    if distance[i] < minvalue and not visited[i]:
      minvalue = distance[i]
      index = i

  return index


def dijkstra(start):

  distance[start] = 0
  visited[start] = True

  for i in graph[start]:
      distance[i[0]] = i[1]

  for i in range(Node - 1):
    now = get_smallest_node()
    visited[now] = True

    for k in graph[now]:
        Cost = distance[now] + k[1]  # distance[now] + graph[now][k]

        if Cost < distance[k[0]]:
          distance[k[0]] = Cost


if __name__ == '__main__':

  INF = int(1e9)

  Node, Edge = map(int, input().split())
  start = int(input())

#  graph = [[INF for k in range(Node + 1)] for i in range(Node + 1)] 메모리 초과 원인 -> 인접 행렬 사용했기 때문
  graph = [[] for i in range(Node+1)]
  visited = [False] * (Node + 1)
  distance = [INF] * (Node + 1)

  for i in range(Edge):
    node1, node2, cost = map(int, input().split())

    if len(graph[node1]) == 0:
      graph[node1].append([node2,cost])
 
    else:

      cnt = 0
      for k in graph[node1]: # 더작은 값으로 변경해주는 과정, 이 과정에서 시간 오래 걸린듯
        if k[0] == node2:
          k[1] = min(k[1], cost)
          cnt +=1
          break

      if cnt != 1:
        graph[node1].append([node2,cost])

  dijkstra(start)

  for i in range(1, Node + 1):

    if distance[i] == INF:
      print('INF')

    else:
      print(distance[i])
