import sys

input = sys.stdin.readline


def find(parent, x): # 부모가 누군지 찾는 find함수
    if parent[x] != x:
        parent[x] = find(parent, parent[x])

    return parent[x]

def union(parent, a, b): # 집합으로 합쳐주는 union 함수
    a = find(parent, a)
    b = find(parent, b)

    if a < b:
        parent[b] = a

    else:
        parent[a] = b

if __name__ == "__main__":

    vertics = int(input())
    travelCity = int(input())
    parent = [0 for i in range(vertics + 1)]
    edge = []
    edgeCnt = 0
    
    for i in range(vertics+1):
        parent[i] = i
        
    for i in range(1, vertics + 1):
        connected = list(map(int, input().split()))

        for k in range(1, vertics + 1):
            if connected[k - 1] == 1:
                edge.append((i, k, 1))
                edgeCnt += 1

    travelPlan = list(map(int, input().split()))

    for i in range(edgeCnt):
        start, end, cost = edge[i]

        if find(parent, start) != find(parent, end): # 여행 계획을짜는데 
            union(parent, start, end)

    if len(travelPlan) == 1:
        if parent[travelPlan[0]] == travelPlan[0]:
            print('YES')

        else:
            print('NO')

    else:

        flag = True
        for i in range(len(travelPlan)-1):
            if parent[travelPlan[i]] != parent[travelPlan[i+1]]:
                print("NO")
                flag = False
                break

        if flag:
            print("YES")
