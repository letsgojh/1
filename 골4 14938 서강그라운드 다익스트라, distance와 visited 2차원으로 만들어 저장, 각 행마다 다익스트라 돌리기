import sys
import copy

input = sys.stdin.readline


def get_smallest_node(distance, visited): # 가장 비용이 적은 노드 찾기
  min_value = INF
  index = 0

  for i in range(1, Node+1):
    if distance[i] < min_value and not visited[i]:
      min_value = distance[i]
      index = i

  return index

def dijkstra(start, distance, visited):
  visited[start] = True
  distance[start] = 0

  for i in range(1,Node+1):
    if graph[start][i] != INF:
      distance[i] = graph[start][i]
      
  for i in range(Node-1):
    now = get_smallest_node(distance, visited)
    visited[now] = True

    for k in range(1, Node+1): # 각 노드에 가는 비용이 최소인지 확인
      if graph[now][k] != INF:
        Cost = distance[now] + graph[now][k] # 이부분이 계속 생각이안난다.

        if Cost < distance[k]:
          distance[k] = Cost
  

if __name__ == '__main__':

  INF = int(1e9)

  Node, find, Edge = map(int, input().split())
  item_num = list(map(int,input().split()))
  get_max_item = []
  
  graph = [[INF for k in range(Node+1)] for i in range(Node+1)]
  distance = [[INF for k in range(Node+1)] for i in range(Node+1)]
  visited = [[False for k in range(Node+1)]for i in range(Node+1)]

  for i in range(1,Node+1):
    graph[i][i] = 0
  
  for i in range(Edge):
    node1, node2, cost = map(int, input().split())
      
    if graph[node1][node2] == INF and graph[node1][node2] == INF:
      graph[node1][node2] = cost
      graph[node2][node1] = cost
    
    elif node1 != node2:
      graph[node1][node2] = min(graph[node1][node2], cost)
      graph[node2][node1] = graph[node1][node2]

  #print(*graph, sep = '\n')

  for i in range(1, Node+1):
    sum = 0
    dijkstra(i, distance[i], visited[i])
    
    for k in range(1, Node+1):
      if distance[i][k] <= find:
        sum += item_num[k-1]

    get_max_item.append(sum)

  print(max(get_max_item))
